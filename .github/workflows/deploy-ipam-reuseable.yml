# This workflow deploys a the AIPAS IPAM Azure Function

name: Deploy-Ipam

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: "./src/function/"  # set this to the path to your web app project, defaults to the repository root

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
     inputs:
      AZURE_FUNCTIONAPP_NAME:
        required: true
        type: string
        default: "svs3-aipas" 
      RESOURCEGROUPNAME:
        required: true
        default: "rg-aipas-svs3"
        type: string
      SUBSCRIPTIONID:
        required: true
        default: "8e65589a-9d2b-4d0d-a110-33a515a7f266"
        type: string
      REGION:
        required: true
        type: string
        default: "westeurope"

  # Allows you to run this workflow from a starter workflow
  workflow_call:
    inputs:
      AZURE_FUNCTIONAPP_NAME:
        required: true
        type: string
      RESOURCEGROUPNAME:
        required: true
        type: string
      SUBSCRIPTIONID:
        required: true
        type: string
      REGION:
        required: true
        type: string
      EVIRONMENT:
        required: true
        type: string        
    secrets:
      AZURE_CREDENTIALS:
        required: true
      APP_SETTINGS:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy-ipam:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: |
          echo "${{ inputs.RESOURCEGROUPNAME }}"
          echo "${{ inputs.REGION }}"
          echo "${{ secrets.AZURE_CREDENTIALS}}" | sed 's/./& /g'
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Login to Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS}}
      - name: Azure CLI Action
        uses: Azure/cli@1.0.4
        with:
          inlineScript: |
            az group create --name ${{ inputs.RESOURCEGROUPNAME }} --location ${{ inputs.REGION }}
      # Deploy Storage Account
      - name: Deploy Azure Resource Manager (ARM) Template
        uses: Azure/arm-deploy@v1
        id: deploy-storage-account
        with:
          scope: resourcegroup
          subscriptionId: ${{ inputs.SUBSCRIPTIONID }}
          region: ${{ inputs.REGION }}
          resourceGroupName: ${{ inputs.RESOURCEGROUPNAME }}
          template: src/templates/azuredeploy.json          
          deploymentMode: incremental
          deploymentName: "AIPAS-storageaccount"
          parameters: src/templates/azuredeploy.parameters.json
      # Build Azure Function. Copies PowerShell IPAM Module to Azure Function
      - name: Run PowerShell Bootstrap script
        run: .\bootstrap.ps1
        shell: pwsh
      - name: Copy IPAM PowerShell module to Azure Function
        run: Invoke-Build -Task CopyModuleFiles -File './aipas.build.ps1'
        shell: pwsh
      # Create Function App in Azure
      - name: Azure CLI Action - Create Function App
        uses: Azure/cli@1.0.4
        with:
          # Specify the script here
          inlineScript: |
            az functionapp create --resource-group ${{ inputs.RESOURCEGROUPNAME }} --consumption-plan-location ${{ inputs.REGION }} --runtime powershell --functions-version 3 --name ${{ inputs.AZURE_FUNCTIONAPP_NAME }} --storage-account ${{ steps.deploy-storage-account.outputs.StorageAccountName }}
      # Publish Azure Function${{needs.build-and-deploy-storageaccount.outputs.ResourceGroupName}}
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
      # Configure App Settings
      - name: 'Configure App Settings'
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
          #slot-name: 'staging'  # Optional and needed only if the settings have to be configured on the specific deployment slot
          app-settings-json: '${{ secrets.APP_SETTINGS }}'
        id: settings
